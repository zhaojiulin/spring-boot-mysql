<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd ">
    <task:executor id="executor" pool-size="3"/>
    <task:scheduler id="scheduler" pool-size="6"/>
    <!-- 开启注解模式 -->
    <context:annotation-config />
    <!-- 使用Annotation自动注册Bean -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath*:/application.properties"/>
    <aop:aspectj-autoproxy/>
    <bean id="utilBean" class="com.example.demo.util.UtilBean"></bean>
    <bean id="RedisCache" class="com.example.demo.util.RedisCache"></bean>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="5"/>
        <property name="maxActive" value="800"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 开启Druid的监控统计功能 -->
        <property name="filters" value="prod" />
        <!-- 开启数据库密码解密-->
        <property name="connectionProperties" value="prod.decrypt=false" />

    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.example.*.dao"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.example.demo.entity"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="mapperLocations" value="classpath:com/example/**/mapper/*.xml"/>
    </bean>
    <bean id="mqBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder">
        <constructor-arg>
            <bean class="net.rubyeye.xmemcached.utils.AddrUtil" factory-method="getAddresses">
                <constructor-arg value="${mq.host}"/>
            </bean>
        </constructor-arg>
    </bean>
    <bean id="mqClient" class="net.rubyeye.xmemcached.MemcachedClient" factory-bean="mqBuilder" factory-method="build"
          destroy-method="shutdown"/>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="300"/>
        <property name="maxTotal" value="1024"/>
        <property name="minIdle" value="8"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
    </bean>

    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg type="java.lang.String" value="${redis.host}"></constructor-arg>
        <constructor-arg type="int" value="${redis.prot}"></constructor-arg>
        <constructor-arg type="int" value="6000"></constructor-arg>
    </bean>
</beans>
